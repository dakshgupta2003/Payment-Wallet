import React, { useEffect, useState } from "react";
import { Table, Tooltip, message } from "antd";
import TransferFunds from "./TransferFunds";
import { useDispatch, useSelector } from "react-redux";
import { HideLoading, ShowLoading } from "../redux/loadersSlice";
import { getAllTransactionsOfUser } from "../apiCalls/transactions";
import moment from "moment"; // to convert date to sepcific format
import DepositModal from "./DepositModal";

const Transactions = () => {
  const [showTransferFunds, setShowTransferFunds] = useState(false);
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [data, setData] = useState([]);
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.users);
  const columns = [
    {
      title: "Date",
      dataIndex: "date",
      render: (text, record) => {
        return moment(record.createdAt).format("DD-MM-YYYY hh:mm:ss A");
      },
    },
    {
      // autogeneratedID by mongoDB
      title: "Transaction ID",
      dataIndex: "_id",
    },
    {
      title: "Amount",
      dataIndex: "amount",
    },
    {
      title: "Type",
      dataIndex: "type",
      render: (text, record) => {
        const senderId = record.sender._id || record.sender;
        const receiverId = record.receiver._id || record.receiver;
        // return record.sender === user._id ? "Debit" : "Credit"
        if (senderId === user._id && receiverId === user._id) return "Deposit";
        if (senderId === user._id) return "Debit";
        else if (receiverId === user._id) return "Credit";
      },
    },
    {
      // if type is debit then ref account will be receivers account
      // if type is credit then ref account will be senders account
      title: "Reference Account",
      dataIndex: "",
      render: (text, record) => {
        const refAccount = user._id ? record.receiver : record.sender;
        const refName = refAccount.name;

        return (
          <Tooltip title={refName || "Unknown"}>
            <h1 className="text-sm">{refAccount._id}</h1>
          </Tooltip>
        );
      },
    },
    {
      title: "Reference",
      dataIndex: "reference",
    },
    {
      title: "Status",
      dataIndex: "status",
    },
  ];

  const getData = async () => {
    try {
      dispatch(ShowLoading());
      const response = await getAllTransactionsOfUser();
      if (response.success) {
        setData(response.data);
      }
      dispatch(HideLoading());
    } catch (error) {
      dispatch(HideLoading());
      message.error(error.message);
    }
  };

  useEffect(() => {
    getData();
  }, []);

  return (
    <>
      <div className="flex flex-col lg:flex-row items-start gap-4 justify-between mb-4">
        <div>
          <h1 className="text-[20px]">TRANSACTIONS</h1>
          <h1 className="text-xs">Account Number: {user._id}</h1>
        </div>
        <div className="flex gap-2 text-white">
          <button
            className="py-3 px-5 rounded-lg bg-indigo-200 hover:bg-indigo-400"
            onClick={() => setShowDepositModal(true)}
          >
            {/* with this button, we can deposit funds from out bank account to our wallet */}
            Deposit
          </button>

          <button
            className="py-3 px-5 rounded-lg bg-indigo-200 hover:bg-indigo-400"
            onClick={() => setShowTransferFunds(true)}
          >
            Transfer
          </button>
        </div>
      </div>

      <div className="overflow-auto max-h-[519px] scrollbar-thin scrollbar-thumb-gray-400 scrollbar-track-transparent scrollbar-thumb-rounded">
        <Table columns={columns} dataSource={data} rowKey="_id" />
      </div>

      {showTransferFunds && (
        <TransferFunds
          showTransferFunds={showTransferFunds}
          setShowTransferFunds={setShowTransferFunds}
          reloadData={getData}
        />
      )}

      {showDepositModal && (
        <DepositModal
          showDepositModal={showDepositModal}
          setShowDepositModal={setShowDepositModal}
          reloadData={getData}
        />
      )}
    </>
  );
};

export default Transactions;
